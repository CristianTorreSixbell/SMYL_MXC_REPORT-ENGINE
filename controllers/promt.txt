En esta funcion esto intentando verificar la exitencia de un cliente con su token dentro de la db
``` js
 async verifyTokenInOauth(clientId, token) {
        try {
            if( !clientId || !clientSecret ){
                throw new Error('invalid parameters');
            }
            this.logEvent('INFO', 'Verifying token in oauth...', 2);
            const findResult = await TokenModel.find({ client_name: clientId ,token:token});
            if(!findResult){
                throw new Error('Token not found');
            }
            this.logEvent('INFO', 'Token verified successfully', 2);
            return {
                status: 200,
                data: findResult
            }
        } catch (error) {
            this.logEvent('ERROR', `Error verifying token in oauth: ${error}`, 0);
            return {
                status: 500,
                data: `[verifyTokenInOauth(Error)]: (" Error verifying token in oauth ${error} ")`  
            }
        }   
    }
```
Pero el token que tengo que buscar dentro de la base de datos esta encriptado y no es igual al que le estoy pasando que no esta encriptado asi encripto el token al generarrlo
``` js
import mongoose from 'mongoose';
import crypto from 'crypto';
import { chargeData } from '../lib/dotenvExtractor.js';
chargeData();
const { Schema } = mongoose;

const encryptionKey = process.argv[6]; 
const iv = crypto.randomBytes(16); // Initialization vector

const encrypt = (text) => {
    const iv = crypto.randomBytes(16); // Initialization vector
    const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(encryptionKey, 'utf8'), iv);
    let encrypted = cipher.update(text, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    return iv.toString('hex') + ':' + encrypted; // Prepend IV for decryption
};

const decrypt = (text) => {
    const textParts = text.split(':');
    const iv = Buffer.from(textParts.shift(), 'hex');
    const encryptedText = textParts.join(':');
    const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(encryptionKey, 'utf8'), iv);
    let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    return decrypted;
};

const tokenSchema = new Schema({
    token: {
        type: String,
        required: true,
        set: encrypt,
        get: decrypt
    },
    expiration_date: {
        type: Date,
        required: true
    },
    client_name: {
        type: String,
        required: true,
        set: encrypt,
        get: decrypt
    }
}, {
    toJSON: { getters: true },
    toObject: { getters: true }
});

// Index to automatically delete documents after 1 day
tokenSchema.index({ expiration_date: 1 }, { expireAfterSeconds: 86400 });

const TokenModel = mongoose.model('Token', tokenSchema);

export default TokenModel;
```
Este es el aspecto del token encriptado: 
d464a5fac939e9866a37187818bb58ee:c99b2da7b123bc8d51f66cda26ec1508dae81ac90c8698b9e827e80eae27606a97d41d422e0f1faea7c8a1b1de3d0c25d3d9c37961244d26b564bbdcf22ce680bdbd5999c550f990e31be193f1987df9b5ad63b799496e1b92e743258dda0de2e44231311e9594f4ee381975ab452e392f43790f98082c5d383e74ad2ba19f091162a8cdc3117ae622a3d4372bc7f9d2b0111c935251a2e2492129344142993a88ba3008877c47db6653c3eb3a4ddd312ee00593e170e2283fd2a2e4e677e4a1ac1fcd77a62fbce84aa595e449ab976b54832537201133171e64991b3985cf0ef7876ccd7eb0be3dba4782b4de9381bfe27a7fb95607f1015f240b8848a21af5a9c5c61d826a5da9f68f9731ead2b8c95416185ea2299d1b9dba1123d1f5bdeb69cfeb6745a07fb0c0c6f52e8153de401c072e2cafe9a34d197973cc7d30f2a4abda8fcec30c180f80b3921697852a6fba5fdbbaf0414e717d41313799c5305ed95d9aea9e8f168fa9a22f8308a0beeab082e800786d1e939246f254bbdd796679a58094ae8507615b8f124ac00159f8d868cedcdc5f2eb34c8114244dc69094c463f994b514d13bdd8d33eb0c068b31d6bb6886fada04c770eeec7f8ce24340a0a62d480cccd82c3916b0f2f0685b4e41370269b50be2f55bbb131893514eee77e919ecff5468b73f0d4c0a98ed0274946eee37d38fa6b6d1ffb23af6f3dd8f515fbc592359b58bf27b9104b0f5f7ed3eafe44b3da5441106002032ceb351fd8aa567a8489155cd29bcdb903933794c8670501b21f3c1b00c8c48d3557af4b03542a05d9b6fe944edfd0ec9f1aceb512b4957d78e576b1380ea3b7e9338eda9f092372324de7d357c3ce8e411d71a92edab66fd635503a580480f8ddd3843ff72a8341720dd44fb7a9216ec60ebc5344b81e997218d3f0e40482a18ac6a56ab0aeb1b5affce33b2757a98705852071663c6ae3598bc9b5989d34375741652bab402ed42842ced6ff367b3cd5c06c38c